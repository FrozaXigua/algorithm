#算法思路:设head 到节点开始距离是 a, 环的长度是l，慢节点在相遇前在环里跑了d，快节点跑了2(a+d)，慢节点是a+n*l+d
#所以a+d=nl, a=nl-d 所以从head跑到环开始处的距离是等于他们相遇的点跑到环开始处的距离。

class ListNode(object):
     def __init__(self, x):
         self.val = x
         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head:
            return None
        fast,slow=head,head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
            if slow==fast:
                slow2=head
                while slow2!=slow:
                    slow=slow.next
                    slow2=slow2.next
                return slow
